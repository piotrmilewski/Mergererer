//Jason Lam, Piotr Milewski, Judy Liu
//APCS2 pd5
//HW7: What Does the Data Say?
//2017-02-13

/*======================================
  class MergeSortTester
  ALGORITHM:
  <INSERT YOUR DISTILLATION OF ALGO HERE>
  BIG-OH CLASSIFICATION OF ALGORITHM: O(nlog(n))
  <INSERT YOUR EXECUTION TIME CATEGORIZATION OF MERGESORT HERE>
  Mean execution times for dataset of size n: 3
  Batch size: <# of times each dataset size was run>
  n=1       time: 534009
  n=10      time: 684430 
  n=100     time: 735746
  n=1000    time: 1248267

  ...
  n=<huge>  time: 
  ANALYSIS:
  <INSERT YOUR RESULTS ANALYSIS HERE>
  ======================================*/

public class MergeSortTester 
{

    /******************************
     * execution time analysis 
     * <INSERT YOUR DESCRIPTION HERE OF 
     *  YOUR APPARATUS FOR GENERATING EXECUTION 
     *  TIME DATA...>
     * Find the runtime in nanoseconds for Arrays of different sizes (endtime - start time)
     * Put them into a graph 
     * Figure out which graph it is most similar to
     ******************************/
    public static void main( String[] args )   {
    //length of 1
    int[] arr0 = {0};
    //length of 10
    int[] arr1 = {9,42,17,63,0,512,23,1,2,3};
    //length of 100
    int[] arr2 = { 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35};
    //length of 1000
    int[] arr3 = { 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35,8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21, 8, 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35, 18, 34, 40, 38, 25, 19, 7, 39, 28, 3, 4, 33, 24, 12, 14, 5, 31, 6, 29, 20, 30, 21 , 15, 16, 23, 42, 1, 11, 32, 9, 41, 10, 36, 26, 2, 37, 13, 17, 27, 35};

    long start = System.nanoTime();
    
    //Mergesort.sort(arr0);
    //Mergesort.sort(arr1);
    //Mergesort.sort(arr2);
     Mergesort.sort(arr3);
     
     long end = System.nanoTime();
     
    System.out.println(end - start);
    }//end main

}//end class
